Test Patterns in Go
New York City Golang Meetup
15:04 5 Nov 2013
Tags: testing, patterns,

Brandon Keene
Microsoft
bkeene@microsoft.com
http://groupme.com

* About me

- Server Engineer at GroupMe
- GroupMe is a cross-platform group messaging app
- Download it at [[http://groupme.com/app][groupme.com/app]]
- GroupMe is (partially) powered by Go!
- We're hiring! [[http://groupme.com/jobs][groupme.com/jobs]]

* Using the testing package

.code -numbers hello_test.go

Run it:

.code hello_test.out

Woo it passed!

* Error checking

.code -numbers weather_error_test.go

Most real functions will return some sort of error.

You *must* handle this in your test.

Go is all about explict error handling and tests are no different.

* Error checking

.code -numbers weather_error_test.out

The `T.Error` function displays the error and continues execution.

`weather` was also incorrect but we have no idea what value was returned.

Let's modify the test to display this information.

* Expected and actual

.code -numbers weather_expected_test.go

* Expected and actual

Compared values are now clearly visible in test output.

.code weather_expected_test.out

This is super helpful when the test fails months or years from now.

* Comparing structs

An example using a richer data structure.

.code struct_test.go

* Comparing structs

.code struct_test.out

Err, what?

They look semantically equivalent but remember they're different objects!

Let's break this out to see what's wrong.

* Comparing structs

.code crazy_compare_test.go

Clearly would work, but it's needlessly verbose.

We can use `reflect.DeepEqual` to perform a more compact comparison.

* Comparing structs

.code struct_reflect_test.go

Protip: this also works for arrays, slices, and maps.

* Table driven tests

"If the amount of extra code required to write good errors seems repetitive and overwhelming, the test might work better if table-driven, iterating over a list of inputs and outputs defined in a data structure"

From the Go FAQ [[http://golang.org/doc/faq#testing_framework]["Where is my favorite helper function for testing?"]]

* Table driven tests

.code -numbers table_driven_test.go

* Using interfaces

The `testing` package does not have mocks, doubles, stubs or anything fancy.

We can acheive similar results by using interfaces.

Interfaces allow us to substitute test objects. Fake objects can simulate error and success.

This helps decouple other packages (or distant parts of the same package) from concrete implementations and dependencies.

* Using interfaces

We care more about the behavior of `Finder` and less about actual database communication.

.code -numbers interface_code.go

(Note: you should still test real database use)

* Using interfaces

.code -numbers interface_test.go

* Redefine functions in tests

* Testing web servers with net/http/httptest

* Write your own test helper packages

Extract commonly used fake objects or comparison helpers into a test package.

The *<package>/<package><test>* naming scheme is great for avoiding messy import statements.

* Other frameworks and tools

* A word of warning

"[Go] lacks features provided in other language's testing frameworks such as assertion functions."

"...testing frameworks tend to develop into *mini-languages* *of* *their* *own*, with conditionals and controls and printing mechanisms, but Go already has all those capabilities; *why* *recreate* *them* ?"

"We'd rather *write* *tests* *in* *Go*; it's one fewer language to learn and the approach keeps the tests straightforward and easy to understand.‚Äù

From the Go FAQ [[http://golang.org/doc/faq#testing_framework]["Where is my favorite helper function for testing?"]]

* Don't fight the standard

There are *thousands* of idiomatic go tests in the standard library.

They test some pretty complex stuff too.

By using your own framework you're ignoring this excellent and prescriptive body of examples.

My opinion: *Embrace* *the* *Go* *way*.

That said, let's get weird with it!

* gocheck

[[http://labix.org/gocheck][http://labix.org/gocheck]]
[[http://godoc.org/launchpad.net/gocheck][http://godoc.org/launchpad.net/gocheck]]

- Richer test helpers: assertions which interrupt the test immediately, deep multi-type comparisons, string matching, etc
- Suite-based grouping of tests
- Fixtures: per suite and/or per test set up and tear down

* gocheck

.code -numbers gocheck_test.go

* Ginko and Gomega

[[https://github.com/onsi/ginkgo][https://github.com/onsi/ginkgo]]
[[https://github.com/onsi/gomega][https://github.com/onsi/gomega]]

- BDD-style testing framework and matcher library
- Pretty test runner
- Shared set up and tear down
- Nested contexts
- Created by Pivotal Labs

* Ginko and Gomega

.code ginko_gomega_test.go

* Ginko and Gomega

.image ginko_gomega_test.jpg

* Resources

- Standard library testing package - [[http://golang.org/pkg/testing][http://golang.org/pkg/testing]]
- Twelve Go Best Practices - [[http://talks.golang.org/2013/bestpractices.slide][http://talks.golang.org/2013/bestpractices.slide]]
- Go Testing Toolbox - [[http://nathany.com/go-testing-toolbox/][http://nathany.com/go-testing-toolbox/]]




