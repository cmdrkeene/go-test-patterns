Test Patterns in Go
New York City Golang Meetup
15:04 5 Nov 2013
Tags: testing, patterns,

Brandon Keene
Microsoft
bkeene@microsoft.com
http://github.com/cmdrkeene

* About me

- Engineer at GroupMe
- GroupMe is a cross-platform group messaging app
- GroupMe is (partially) powered by Go!
- Download it at [[http://groupme.com/app][groupme.com/app]]
- We're hiring! [[http://groupme.com/jobs][groupme.com/jobs]]

* Disclaimer

- Views expressed are my own, not Microsoft's
- Many ideas borrowed from other people (see Resources slide)
- Very cursory overview of the topic
- A lot of code is omitted for brevity
- Please feel free to heartily agree or disagree with me afterward :)

* Using the testing package

.code -numbers hello_test.go

Run it:

.code hello_test.out

Woo it passed!

* Error checking

.code -numbers weather_error_test.go

Most real functions will return some sort of error.

Go is all about explicit error handling and tests are no different.

* Error checking

.code -numbers weather_error_test.out

The `T.Error` function displays the error and continues execution.

`weather` was also incorrect but we have no idea what value was returned.

Let's modify the test to display this information.

* Expected and actual

.code -numbers weather_expected_test.go

The spacing around "actual" helps align output.

* Expected and actual

Compared values are now clearly visible in test output.

.code weather_expected_test.out

A much more helpful error message.

This is great when the test fails months or years from now.

Future you will love past you for it.

* Comparing structs

An example using a richer data structure.

.code struct_test.go

* Comparing structs

.code struct_test.out

Err, what?

They look semantically equivalent but remember they're different instances!

How can we make sure they're equal?

* Comparing structs

.code crazy_compare_test.go

Clearly would work, but it's needlessly verbose.

We can use `reflect.DeepEqual` to perform a more compact comparison.

* Comparing structs

.code struct_reflect_test.go

This also works for arrays, slices, and maps.

* Table driven tests

"If the amount of extra code required to write good errors seems repetitive and overwhelming, the test might work better if table-driven, iterating over a list of inputs and outputs defined in a data structure"

From the Go FAQ [[http://golang.org/doc/faq#testing_framework]["Where is my favorite helper function for testing?"]]

* Table driven tests

.code -numbers table_driven_test.go

Struct literals are super useful.

* Using interfaces

- `testing` package does not have mocks or doubles
- Interfaces help with Dependency Injection
- Test objects can easily simulate error or success
- Lets us focus on the unit

* Using interfaces

We care more about the behavior of `Finder` and less about actual database communication.

.code -numbers interface_code.go

(Note: you should still test real database interaction somewhere)

* Using interfaces

.code -numbers interface_test.go

* Using interfaces

For package level functions, use an underlying variable.

Initialize the real value and swap it out in test.

.code -numbers interface_context_code.go

* Redefine functions

- Go supports first class functions
- Tests have access to package local functions
- We can swap out the implementation of a function for testing

* Redefine functions

.code -numbers redefine_function_code.go

* Redefine functions in tests

.code -numbers redefine_function_test.go

* Shorthand test types

.code -numbers shorthand_code.go

* Shorthand test types

.code -numbers shorthand_test.go

Not too useful in the singular case, but...

* Shorthand test types

.code -numbers shorthand_table_test.go

Defintely useful in the plural case.

* Memory allocation tests

- Ensure resource constrained tasks do not exceed boundaries
- Understand what your code is actually doing
- Useful against performance regressions and memory leaks

* Memory allocation tests

.code -numbers memory_test.go

* Using net/http/httptest

.code -numbers net_http_httptest_recorder.go

* Using net/http/httptest

.code -numbers net_http_httptest_server.go

* Test helper packages

- Extract commonly used fake objects or helpers into a test package
- Use the `<package>/<package>test` naming scheme to avoid conflicts
- Useful for external package users too

* Other frameworks

* A word of warning

"[Go] lacks features provided in other language's testing frameworks such as assertion functions."

"...testing frameworks tend to develop into *mini-languages* *of* *their* *own*, with conditionals and controls and printing mechanisms, but Go already has all those capabilities; *why* *recreate* *them* ?"

"We'd rather *write* *tests* *in* *Go*; it's one fewer language to learn and the approach keeps the tests straightforward and easy to understand.‚Äù

From the Go FAQ [[http://golang.org/doc/faq#testing_framework]["Where is my favorite helper function for testing?"]]

* Don't fight the standard

There are *thousands* of idiomatic go tests in the standard library.

They test some pretty complex stuff too.

By using your own framework you're ignoring this excellent and prescriptive body of examples.

My opinion: *Embrace* *the* *Go* *way*.

That said, let's get weird with it!

* gocheck

[[http://labix.org/gocheck][http://labix.org/gocheck]]
[[http://godoc.org/launchpad.net/gocheck][http://godoc.org/launchpad.net/gocheck]]

- Richer test helpers: assertions which interrupt the test immediately, deep multi-type comparisons, string matching, etc
- Suite-based grouping of tests
- Fixtures: per suite and/or per test set up and tear down
- Enhanced test output
- And more!

* gocheck

.code -numbers gocheck_test.go

* gocheck

.code gocheck_test.out

* Ginko and Gomega

[[https://github.com/onsi/ginkgo][https://github.com/onsi/ginkgo]]
[[https://github.com/onsi/gomega][https://github.com/onsi/gomega]]

- BDD-style testing framework and matcher library
- Shared set up and tear down
- Nested contexts
- Enhanced test output (color!)

* Ginko and Gomega

.code ginko_gomega_test.go

* Ginko and Gomega

.image ginko_gomega_test.jpg

* Resources

Thanks to everyone below!

- Go standard library (read the tests!) - [[http://golang.org/pkg][http://golang.org/pkg]]
- testing package - [[http://golang.org/pkg/testing][http://golang.org/pkg/testing]]
- net/http/httptest package - [[http://golang.org/pkg/net/http/httptest][http://golang.org/pkg/http/httptest]]
- Twelve Go Best Practices - [[http://talks.golang.org/2013/bestpractices.slide][http://talks.golang.org/2013/bestpractices.slide]]
- Go Testing Toolbox - [[http://nathany.com/go-testing-toolbox/][http://nathany.com/go-testing-toolbox/]]
- "Dependency Injection" in Go - [[http://openmymind.net/Dependency-Injection-In-Go/][http://openmymind.net/Dependency-Injection-In-Go/]]




